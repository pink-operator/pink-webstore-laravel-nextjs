---
# **Project Requirements Document: E-commerce API MVP**

The following table outlines the detailed functional requirements of the E-commerce API MVP.

| Requirement ID | Description                  | User Story                                                                                         | Expected Behavior/Outcome                                                                                                              |
|----------------|------------------------------|----------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|
| FR001          | Database Schema Design       | As an admin, I need to store and manage product, user, and order data so the platform can operate efficiently. | A relational database with tables for users, products, orders, and order_items is created. Relationships are enforced via foreign keys. Fields like price, status, and stock_quantity are included. |
| FR002          | User Registration & Authentication | As a customer, I want to create an account and log in securely to place orders.                     | Users can register with email/password. Authentication tokens (via Sanctum) are issued upon login. Protected routes require valid tokens. |
| FR003          | Role-Based Access Control    | As an admin, I need exclusive access to product/order management tools. As a customer, I should only see my own orders. | Admins can access `/admin/*` routes. Customers get 403 errors if they try to access admin routes. Orders are filtered by `user_id` for customers. |
| FR004          | Product CRUD Operations      | As an admin, I want to add, edit, or delete products to keep the catalog updated.                  | Admin-only API endpoints allow creating, updating, and deleting products. Validation ensures required fields (name, price) are provided. |
| FR005          | Product Search & Filtering   | As a customer, I want to browse products by price or availability to find what I need.             | `GET /api/products` accepts `min_price`, `max_price`, and `in_stock` filters. Results are paginated.                                  |
| FR006          | Order Creation               | As a customer, I want to add multiple products to an order and see the total price calculated automatically. | `POST /api/orders` accepts a list of products/quantities. Total price is calculated, stock is reduced, and order status defaults to "pending". |
| FR007          | Order Status Management      | As an admin, I need to update order statuses (e.g., mark as "completed") to reflect fulfillment progress. | `PATCH /api/orders/{id}` allows admins to change status. Customers cannot modify status.                                               |
| FR008          | Stock Validation             | As the system, I need to prevent orders if products are out of stock to avoid overselling.         | If a product’s `stock_quantity` is less than the requested quantity, the API returns a 422 error with a clear message.                |
| FR009          | Order History Access         | As a customer, I want to view my past orders to track purchases.                                   | `GET /api/orders` returns a list of the authenticated user’s orders with items and statuses.                                           |
| FR010          | Payment Simulation           | As a customer, I want to simulate payment completion to test the checkout flow.                    | `POST /api/orders/{id}/pay` (mock endpoint) updates order status to "processing" if payment succeeds.                                |
| FR011          | Automated Testing            | As a developer, I need tests to ensure critical features (e.g., order creation) work reliably.     | PHPUnit tests cover product CRUD, order workflows, and stock updates. Tests pass with ≥90% coverage.                                  |
| FR012          | API Documentation            | As a developer, I want clear API docs to understand how to integrate with the system.              | Swagger/OpenAPI docs are generated with endpoint details, parameters, and example requests/responses.                                 |
| FR013          | Deployment Setup             | As a developer, I need to deploy the API with proper environment configuration.                    | A `.env.example` file includes required variables (database, Sanctum). The README explains deployment steps.                          |
| FR014          | Seed Data & Demo Accounts    | As a tester, I need sample data to simulate real-world scenarios.                                  | Database seeders create demo products, an admin user (`admin@example.com`), and test customers.                                       |

---